#!/usr/bin/env bash

###########################################################################################################
# Header
#
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)
start="$(pwd)"
BASEOS="$(uname)"
account_path=$(ls -la $AXIOM_PATH/axiom.json | rev | cut -d " " -f 1 | rev)
accounts=$(ls -l "$AXIOM_PATH/accounts/" | grep "json" | grep -v 'total ' | awk '{ print $9 }' | sed 's/\.json//g')
current=$(ls -lh ~/.axiom/axiom.json | awk '{ print $11 }' | tr '/' '\n' | grep json | sed 's/\.json//g') > /dev/null 2>&1
case $BASEOS in
'Darwin')
    PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
    ;;
*) ;;
esac

###########################################################################################################
# Declare defaut variables
#
ssh_config="$AXIOM_PATH/.sshconfig"
use_tmux=false
attachonly=false
spawn=true
use_mosh=false
tmux_session="main"
connected=false
cache=false
just_generate=false
args="-F $ssh_config"
toggle=false

###########################################################################################################
# Help Menu:
#
function usage() {
    echo -e "${BWhite}Usage:${Color_Off} axiom-ssh [OPTIONS] <instance> [<ssh_args>]"
    echo
    echo -e "${BWhite}Description:${Color_Off}"
    echo -e "  Dynamically generate Axiom's SSH config and connect to instances."
    echo -e "  Supports public/private IPs, tmux sessions, mosh, and SSH port forwarding."
    echo -e "  All extra args are passed directly to the ssh command."
    echo
    echo -e "${BWhite}Connection Options:${Color_Off}"
    echo -e "  <instance>                 Name of the instance to connect to (required)"
    echo -e "  --mosh, -m <instance>      Connect using mosh instead of ssh"
    echo -e "  --cache                    Use cached SSH config without regenerating"
    echo -e "  --debug                    Enable debug output"
    echo
    echo -e "${BWhite}Tmux Options:${Color_Off}"
    echo -e "  --tmux <name>              Start or attach to a tmux session (default: 'main')"
    echo -e "  --tmux-attach, -t <name>   Only attach if tmux session exists; do not create it"
    echo
    echo -e "${BWhite}SSH Config Generation:${Color_Off}"
    echo -e "  --just-generate            Generate SSH config and exit (default: use public IPs)"
    echo -e "  --just-generate private    Generate config using private IPs"
    echo -e "  --just-generate cache      Lock cached config to avoid regeneration"
    echo
    echo -e "${BWhite}Examples:${Color_Off}"
    echo -e "  ${BGreen}axiom-ssh testy01${Color_Off}                          # Connect to instance 'testy01'"
    echo -e "  ${BGreen}axiom-ssh testy01 --tmux mysession${Color_Off}         # Start/attach to tmux session 'mysession'"
    echo -e "  ${BGreen}axiom-ssh --just-generate private${Color_Off}          # Generate SSH config with private IPs only"
    echo -e "  ${BGreen}axiom-ssh testy01 -L 8080:127.0.0.1:8080 -D 4040${Color_Off}  # Forward ports using ssh args"
    echo
}

###########################################################################################################
# Parse command line arguments
#
i=0
for arg in "$@"
do
    i=$((i+1))
    if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
        set=false
        if [[ "$i" == 1 ]]; then
            instance="$1"
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--debug" ]]; then
            set -xv
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--tmux" ]]; then
            n=$((i+1))
            tmux_session=$(echo ${!n})
            use_tmux=true
            set=true
            pass+=($i)
            pass+=($n)
        fi

        if [[ "$arg" == "--tmux-attach" ]] || [[ "$arg" == "-t" ]] || [[ "$arg" == "-t=" ]]; then
            n=$((i+1))
            attachonly=true
            tmux_session=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--just-generate" ]]; then
            n=$((i+1))
            just_generate=true
            toggle=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--mosh" ]]; then
            n=$((i+1))
            use_mosh=true
            instance=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]] || [[ "$arg" == "help" ]]; then
            usage
            exit
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--cache" ]]; then
            cache=true
            set=true
            pass+=($i)
        fi
        if  [[ "$set" != "true" ]]; then
            args="$args $arg"
        fi
    fi
done

###########################################################################################################
# Display Help Menu
#
if [[ "$*" == "--help" ]] || [[ "$*" == "-h" ]] || [[ "$*" == "" ]] || [[ "$*" == "help" ]]; then
usage
exit
fi

###########################################################################################################
# if --tmux is provided without a name, default to 'main'
#
if [ -z ${tmux_session:+x} ]; then
tmux_session="main"
fi

###########################################################################################################
# SSH generate toggle and store toggle in account.json
#
if [[ "$toggle" == "public" ]] || [[ "$toggle" == "Public" ]] || [[ "$toggle" == "PUBLIC" || $toggle == "" ]]; then
jq '.generate_sshconfig="public"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"
fi

if [[ "$toggle" == "private" ]] || [[ "$toggle" == "Private" ]] || [[ "$toggle" == "PRIVATE" ]]; then
jq '.generate_sshconfig="private"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"
fi 

if [[ "$toggle" == "cache" ]] || [[ "$toggle" == "Cache" ]] || [[ "$toggle" == "CACHE" ]] || [[ "$toggle" == "Lock" ]]|| [[ "$toggle" == "lock" ]]; then
jq '.generate_sshconfig="cache"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"
fi

###########################################################################################################
# If --cache flag isnt provided, regenerate axiom's SSH config
#
if [ $cache != true ]
then
generate_sshconfig
fi

###########################################################################################################
# If --tmux is in the command, connect to instance and spawn a new tmux session
#
if [ $use_tmux == true ]
then
args="$args -t 'systemd-run --scope --user tmux new-session -s $tmux_session'"
fi

###########################################################################################################
# Attach to tmux session by name, if session isnt created this will error
#
if [ $attachonly == true ]
then
args="$args -t 'tmux attach -t $tmux_session'"
fi

###########################################################################################################
# If --mosh is in the command, connect to instance via mosh
#
if [ $use_mosh == true ]
then
new_args=""
for i in $args
do
if [[ "$i" != "$1" ]] && [[ ! "$i" =~ "-t" ]]
then
new_args="$new_args $i"
fi
done
cmd="mosh --ssh='ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no $instance $new_args' $2 -- tmux attach -t $tmux_session -d"
echo $cmd
else

###########################################################################################################
# Command to run whenever mosh isnt used
#
cmd="ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no $instance $args"
fi

###########################################################################################################
# Execute command unless --just-generate is supplied
#
if [ "$just_generate" == "false" ]
then
	bash -c "$cmd"
fi
